# Loosely based on vault.spec by John Boero - jboero@hashicorp.com

# This macro can be slightly different than %%{version}.
# For example, it should have a dash instead of tilde for release candidates.
%global package_version 2.4.0

%global oldname vault

Name: openbao
Version: 2.4.0
Release: %autorelease
Summary: A tool for securely accessing secrets
# See LICENSE for primary license
# See LICENSE_DEPENDENCIES.md for bundled dependencies
# CC0-1.0 is normally not permissible for code in Fedora. Because the vendored Go package
# github.com/zeebo/blake3 it applies to has been available in Fedora as golang-github-zeebo-blake3
# since before the cutoff date 2022-08-01, the exception to use it also applies here.
License: MPL-2.0
Source0: https://github.com/openbao/%{name}/releases/download/v%{package_version}/%{name}-dist-%{package_version}.tar.xz
# This includes extra files to include in the package and is used as a
# single branch to track changes to them and a place where checks can be
# automated using github actions.
Source1: https://github.com/opensciencegrid/%{name}-rpm/releases/download/v%{package_version}/%{name}-rpm-%{package_version}.tar.gz
Patch0: goversion.patch

BuildRequires: golang-bin
BuildRequires: systemd-rpm-macros
%{?sysusers_requires_compat}
%if ! 0%{?el8}
BuildRequires: go-rpm-macros
%endif

URL: https://openbao.org

# The bundled provides are generated from an awk/sed pipeline in the
# make-spec script (which is included in Source1) that reads from go.mod.
# This line gets replaced by bundled provides

%description
Openbao secures, stores, and tightly controls access to tokens, passwords,
certificates, API keys, and other secrets in modern computing. Openbao handles
leasing, key revocation, key rolling, and auditing. Through a unified API, users
can access an encrypted Key/Value store and network encryption-as-a-service, or
generate AWS IAM/STS credentials, SQL/NoSQL databases, X.509 certificates, SSH
credentials, and more.

%package %{oldname}-compat
Summary: Vault-compatible command and service
Requires: %{name} = %{version}-%{release}
Provides: %{oldname} = %{version}-%{release}
Obsoletes: %{oldname} < 2.0

%description %{oldname}-compat
Provides a compatibility layer on top of OpenBao to emulate a Hashicorp
Vault package.

%prep
%setup -q -T -b 1 -n %{name}-rpm-%{package_version}
%setup -q -n %{name}-dist-%{package_version}
%autopatch

%build
# starts out in %%{name}-dist-%%{package_version} directory

# this prevents it from complaining that ui assets are too old
touch http/web_ui/index.html

GO_BUILDTAGS="ui"
GO_LDFLAGS="-X github.com/%{name}/%{name}/version.fullVersion=%{version}-%{release}"
GO_LDFLAGS+=" -X github.com/%{name}/%{name}/version.GitCommit="
BUILD_DATE="$(date -d "@${SOURCE_DATE_EPOCH:-$(date +%s)}" +%Y-%m-%d)"
GO_LDFLAGS+=" -X github.com/%{name}/%{name}/version.BuildDate=${BUILD_DATE}"

%if 0%{?el8}
# Define the %%gobuild macro on el8 because it is outdated and doesn't work.

GO_LDFLAGS+=" -B gobuildid"
GO_BUILDTAGS+=" rpm_crashtraceback libtrust_openssl"
GO_LDFLAGS+=" -linkmode=external -compressdwarf=false"
GO_LDFLAGS+=" -extldflags '%__global_ldflags'"

%define gobuild go build -compiler gc -buildmode pie -ldflags "${GO_LDFLAGS}" -tags "${GO_BUILDTAGS}"

%else
# Use more modern gobuild macro.

# Except for el9, this defaults to not use go modules.  Enable go modules
# because it is allowed and is a simpler option than making the additional go
# macros required to manage the non-module form on el8 where they're missing.
%global gomodulesmode GO111MODULE=on

%if 0%{?el9}
# the el9 gobuild macro only accepts LDFLAGS, not GO_LDFLAGS
LDFLAGS=${GO_LDFLAGS}
%endif
%endif

%if "%{?go_debug}" != ""
# add debugging & testing flags
GO_BUILD_GCFLAGS="all=-N -l"
GO_LDFLAGS+=" -X github.com/%{name}/%{name}/version.VersionMetadata=testonly"
# openbao documentation says testonly should not be used for production builds
GO_BUILDTAGS+=" testonly"
%gobuild -o bin/bao -gcflags "${GO_BUILD_GCFLAGS}"
%else
%gobuild -o bin/bao
%endif


%install
# starts out in %%{name}-dist-%%{package_version} directory
mkdir -p %{buildroot}%{_bindir}/
cp -p bin/bao %{buildroot}%{_bindir}/
ln -s bao %{buildroot}%{_bindir}/%{oldname}

cd ../%{name}-rpm-%{package_version}
mkdir -p %{buildroot}%{_sysconfdir}/%{name}.d/tls
cp -p %{name}.hcl %{buildroot}%{_sysconfdir}/%{name}.d
ln -s %{name}.d %{buildroot}%{_sysconfdir}/%{oldname}.d

mkdir -p %{buildroot}%{_datadir}/man/man1
gzip -c bao.1 >%{buildroot}%{_datadir}/man/man1/bao.1.gz
ln -s bao.1 %{buildroot}%{_datadir}/man/man1/%{oldname}.1.gz

mkdir -p %{buildroot}%{_sharedstatedir}/%{name}
ln -s %{name} %{buildroot}%{_sharedstatedir}/%{oldname}

mkdir -p %{buildroot}%{_unitdir}
cp -p %{name}.service %{buildroot}%{_unitdir}
ln -s %{name}.service %{buildroot}%{_unitdir}/%{oldname}.service

mkdir -p %{buildroot}%{_sysusersdir}
cp %{name}.conf %{buildroot}%{_sysusersdir}/%{name}.conf

#
# NOTE: we can't run the standard go tests because some of them
# require network access.
#

%pre
%sysusers_create_compat %{name}.conf

%post
%systemd_post %{name}.service

%preun
%systemd_preun %{name}.service

%postun
%systemd_postun_with_restart %{name}.service

%files
%verify(not caps) %{_bindir}/bao
%dir %{_sysconfdir}/%{name}.d
%attr(0700,%{name},%{name}) %dir %{_sysconfdir}/%{name}.d/tls
%config(noreplace) %{_sysconfdir}/%{name}.d/%{name}.hcl
%attr(0700,%{name},%{name}) %dir %{_sharedstatedir}/%{name}
%{_unitdir}/%{name}.service
%{_sysusersdir}/%{name}.conf
%{_datadir}/man/man1/bao.1.gz
%license LICENSE
%license LICENSE_DEPENDENCIES.md
%doc README.md
%doc CHANGELOG.md

%files %{oldname}-compat
%{_bindir}/%{oldname}
%{_sysconfdir}/%{oldname}.d
%{_sharedstatedir}/%{oldname}
%{_datadir}/man/man1/%{oldname}.1.gz
%{_unitdir}/%{oldname}.service

%changelog
%autochangelog
